#!/bin/bash

# Directory to store clipboard history
HISTORY_FILE="$HOME/.clipboard_history"

# Ensure the history file exists
touch "$HISTORY_FILE"

# Command for clipboard management on Wayland
CLIP_COMMAND="wl-paste"
COPY_COMMAND="wl-copy"

# Function to save the clipboard to history
save_clipboard() {
	$CLIP_COMMAND >> "$HISTORY_FILE"
}

# Function to show the clipboard history and let the user choose an entry
select_clipboard() {
    # Show history using fzf (interactive search)
    # Use tac to reverse the order so that the most recent entry is on top

    foot -e bash -c "
	 # Command for clipboard management on Wayland
	 CLIP_COMMAND=\"wl-paste\"
	 COPY_COMMAND=\"wl-copy\"
    selected=\$(tac \"$HOME/.clipboard_history\" | fzf -m --preview \"echo {}\" --preview-window=up:20%:wrap)
	 if [ -n \"\$selected\" ]; then
		 echo \"\$selected\" | \"\$COPY_COMMAND\";
		 notify-send \"Copied\" -t 1000 -u low
	 fi
    " & disown
}

# Function to clear clipboard history
clear_history() {
	> "$HISTORY_FILE"
}

# Function to stop clipboard monitoring
stop_monitoring() {
	rm -rf $LOCK_FILE; pkill -f clip-asd
}

monitor_clipboard() {
	wl-copy < /dev/null
    # Initialize the previous clipboard content to an empty string
    prev_clipboard=""
    notify-send "Clipping..." -t 99999 -r 1065 -u low
    # Infinite loop until new clipboard content is detected
    while true; do
        # Get current clipboard content
        current_clipboard=$($CLIP_COMMAND)
        # If the clipboard content has changed, save it and update the previous clipboard
        if [ "$current_clipboard" != "$prev_clipboard" ]; then
            # Save the new content to the history file
            save_clipboard
            prev_clipboard="$current_clipboard"
            # Notify that a new entry has been added to the clipboard history
            notify-send "New clipboard entry added!" -t 1000 -r 1065 -u normal
            # Break the loop after detecting the new entry
            break
        fi
        # Sleep to avoid high CPU usage
        sleep 0.2
    done
}

case $1 in
	sel) select_clipboard ;;
	clear) clear_history && notify-send -t 1000 -r 9611 "Clipboard Cleared" ;;
	*) monitor_clipboard ;;
	#*) notify-send "usage: sel, clear";exit 1 ;;
esac
